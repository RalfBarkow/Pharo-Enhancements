{
	"__schema" : "4.1",
	"__type" : "page",
	"uid" : {
		"__type" : "uuid",
		"uuid" : "7caf6543-8084-0d00-b964-6f970f742dd9"
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "SmaCC"
	},
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-02-16T15:57:41.787409-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-02-16T16:38:47.674553-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "6zs0o4qUDQCQF5a/ABGn9Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "# Getting Started\rSmaCC seems designed to be managed *only* with the SmaCC GUI tools. These have been ported to Morphic, but are still WIP in Gtoolkit. The needed boilerplate to get started is: 1) a scanner class and 2) a parser class that returns the scanner class from class-side `scannerClass`. Coder now supports new SmaCC creation from the same menu as creating a new class"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-02-16T15:57:30.636449-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-02-16T16:39:21.302392-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "gDiKooqUDQCQEZ+DABGn9Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "# Documentation\n- [Original docs](http://www.refactoryworkers.com/SmaCC.html)\rThe most comprehensive documentation of the grammar is {{gtClass:SmaCCDefinitionParser}} itself. With the SmaCC GUI tools, or GToolkit views, you can easily browse and test the productions. You will find lots of interesting little details that may be too arcane for most written docs. For example, did you know that productions can use either `:` or the more standard `::`=? How do we know, we checked out the `<production>` rule and in GToolkit even live-tested `::`= as a sanity check to make sure it matched."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-02-16T16:04:33.194199-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-02-16T16:05:29.655436-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "buu5u4qUDQCQn4g6ABGn9Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "# Conversion from Antlr\nThe GT Book now has a page on this: {{gtPage:How to translate an ANTLr parser into SmaCC|db=2j9m7db2i4oz116bexd7wbdxo}}.\rHere's an example from John Brant via Discord GT general channel 9/22:\r```\r| antlrAST rwRule rewriter |\rantlrAST := Antlr4Parser parse: (ZnEasy get: 'https://raw.githubusercontent.com/antlr/grammars-v4/master/arithmetic/arithmetic.g4') contents.\rrwRule := (ZnEasy get: 'https://raw.githubusercontent.com/j-brant/SmaCC/master/rewrites/antlr/antlr.rw') contents.\rrewriter := SmaCCRewriteEngine new.\rrewriter rewriteRule: (SmaCCRewriteRuleFileParser parse: rwRule).\rrewriter rewriteTree: antlrAST\r```\n\nIn reference to [a WIP HTML parser](https://github.com/seandenigris/Resources-Live/blob/master/src/ResourcesLive/RlHTMLParser.class.st) (and [scanner](https://github.com/seandenigris/Resources-Live/blob/master/src/ResourcesLive/RlHTMLScanner.class.st)), John Brant offered the following guidance [on Discord](https://discord.com/channels/729445214812504107/736333725788274819/765277459330891807):\n@SeanDeNigris Looking at your grammar, I think the next step would be to try to fix the TODO parts that are in the grammar that the conversion tool couldn't handle. It appears that there are two main issues with the grammar that weren't handled by the conversion. The first is that SmaCC doesn't have non-greedy matching for the scanner (.*?).  The other is the pushMode/popMode code.  For the non-greedy matching, the regex needs to be modified.  Some of them are easy to modify like SCRIPT_OPEN which can be changed to \\<script [^\\>]* \\> since it only ends with a > we can take any character except for the >. For items like SCRIPTLET that end with either a ?> or %>, then you would need a more complex regex similar to the one for a C-style comment /* */ (e.g.,  \\/\\* [^\\*]* \\*+ ([^\\/\\*] [^\\*]* \\*+)* \\/ handles C comments). For the push/popMode stuff, you'll need to add a production before the token is used in the grammar. For example,  in the script production, you would write PushScript <SCRIPT_OPEN> ....  Then you'll need to create a PushScript : [self scope: #SCRIPT]; . Similarly for popMode, you would create a production like Pop to add before that token. For now, you could define it as Pop : [self scope: #default];. If a stack is really needed, then the push and pop rules will need to be modified a little."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-02-16T15:57:38.89523-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-02-16T15:57:38.89523-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "qjQIo4qUDQCQFSVsABGn9Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "# Completion in GT\rPer John Brant in Discord GT -> how-to:\rTo build completion with a SmaCC AST, you need to create a new subclass of GtCompletionStrategy (e.g., GtPharoCompletionStrategy) and override the completionActionsFor:at:max:requested: method. That method will need to parse the text using the parseWithErrors:{startingAt:} method. This method will return an AST and where there are parse errors it will insert SmaCCErrorNodes. Now, you'll either want to create a custom visitor for  completion or you can add extension methods to your AST nodes. The GtPharoCompletionStrategy uses extension methods where several nodes defined a completionActionsFor: method. For example, the GtPharoVariableNode>>completionActionsFor: method checks that the cursor position is at the end of the variable name, and then gets a list of completions that start with the variable from both the local variables defined in the AST and externally defined variables like instance and global variables. The method then returns a collection of GtCompletionActions that are shown in the drop down. For completion, probably the most important completion action is the GtInsertTextCompletionAction, but there are actions like deleting text and composites."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-07-27T13:51:58.718212-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-02-16T15:57:39.093788-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "BqFmQ4CEDQC5bXLBD3Qt2Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "# Questions\r- Why create a rule with just one token e.g. `Number : <number> {{Number}} ;`\r- When would you not want to `%annotate_tokens;`?\r"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2021-07-27T13:51:58.718209-04:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2021-07-27T13:51:58.718209-04:00"
		}
	}
}